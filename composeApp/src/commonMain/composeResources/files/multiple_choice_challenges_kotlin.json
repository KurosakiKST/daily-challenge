[
  {
    "question": "What keyword is used to declare an immutable variable in Kotlin?",
    "options": [
      "var",
      "val",
      "const",
      "let"
    ],
    "correctAnswer": "val",
    "explanation": "In Kotlin, `val` is used to declare read-only (immutable) variables, while `var` is used for mutable variables.",
    "difficulty": "Easy"
  },
  {
    "question": "Which operator is used for safe calls on nullable types in Kotlin?",
    "options": [
      "?:",
      "!!",
      "?.",
      "??"
    ],
    "correctAnswer": "?.",
    "explanation": "The safe call operator `?.` allows you to call methods or access properties on nullable objects without causing a NullPointerException.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the return type of a function that doesn't return any meaningful value in Kotlin?",
    "options": [
      "void",
      "Unit",
      "Nothing",
      "null"
    ],
    "correctAnswer": "Unit",
    "explanation": "`Unit` is Kotlin's equivalent to Java's `void`. It indicates that a function doesn't return any meaningful value.",
    "difficulty": "Easy"
  },
  {
    "question": "Which keyword is used to create a singleton in Kotlin?",
    "options": [
      "class",
      "object",
      "singleton",
      "static"
    ],
    "correctAnswer": "object",
    "explanation": "The `object` keyword creates a singleton instance in Kotlin, ensuring only one instance exists.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the Elvis operator in Kotlin?",
    "options": [
      "?.",
      "!!",
      "?:",
      "??"
    ],
    "correctAnswer": "?:",
    "explanation": "The Elvis operator `?:` provides a default value when the left-hand side expression is null.",
    "difficulty": "Easy"
  },
  {
    "question": "Which keyword is used to make a function available as an infix notation?",
    "options": [
      "inline",
      "infix",
      "operator",
      "extension"
    ],
    "correctAnswer": "infix",
    "explanation": "The `infix` keyword allows a function to be called using infix notation (without dot and parentheses).",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `!!` operator do in Kotlin?",
    "options": [
      "Safe call",
      "Elvis operator",
      "Not-null assertion",
      "Logical NOT"
    ],
    "correctAnswer": "Not-null assertion",
    "explanation": "The `!!` operator converts a nullable type to non-null, throwing a KotlinNullPointerException if the value is null.",
    "difficulty": "Easy"
  },
  {
    "question": "Which function creates an immutable list in Kotlin?",
    "options": [
      "mutableListOf()",
      "arrayListOf()",
      "listOf()",
      "list()"
    ],
    "correctAnswer": "listOf()",
    "explanation": "`listOf()` creates an immutable (read-only) list, while `mutableListOf()` creates a mutable list.",
    "difficulty": "Easy"
  },
  {
    "question": "What keyword is used to declare extension functions in Kotlin?",
    "options": [
      "extend",
      "extension",
      "fun",
      "external"
    ],
    "correctAnswer": "fun",
    "explanation": "Extension functions are declared using the `fun` keyword with the receiver type specified before the function name.",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword makes a class open for inheritance in Kotlin?",
    "options": [
      "open",
      "abstract",
      "sealed",
      "inherit"
    ],
    "correctAnswer": "open",
    "explanation": "Classes in Kotlin are final by default. The `open` keyword makes them available for inheritance.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the default visibility modifier in Kotlin?",
    "options": [
      "private",
      "protected",
      "internal",
      "public"
    ],
    "correctAnswer": "public",
    "explanation": "Unlike Java, the default visibility modifier in Kotlin is `public`, not package-private.",
    "difficulty": "Easy"
  },
  {
    "question": "Which keyword is used to declare a data class in Kotlin?",
    "options": [
      "class",
      "data class",
      "struct",
      "record"
    ],
    "correctAnswer": "data class",
    "explanation": "`data class` automatically generates `equals()`, `hashCode()`, `toString()`, and `copy()` methods.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `lateinit` keyword do?",
    "options": [
      "Makes a property lazy",
      "Delays initialization of non-null properties",
      "Makes a property nullable",
      "Initializes a property late in the constructor"
    ],
    "correctAnswer": "Delays initialization of non-null properties",
    "explanation": "`lateinit` allows non-null properties to be initialized after object construction, commonly used with dependency injection.",
    "difficulty": "Medium"
  },
  {
    "question": "Which operator is used for structural equality in Kotlin?",
    "options": [
      "==",
      "===",
      "equals()",
      ".eq()"
    ],
    "correctAnswer": "==",
    "explanation": "`==` checks for structural equality (calls `equals()`), while `===` checks for referential equality.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the supertype of all non-nullable types in Kotlin?",
    "options": [
      "Object",
      "Any",
      "Any?",
      "Nothing"
    ],
    "correctAnswer": "Any",
    "explanation": "`Any` is the root of the Kotlin class hierarchy for non-nullable types, equivalent to Java's `Object`.",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword is used to declare a coroutine function?",
    "options": [
      "async",
      "suspend",
      "coroutine",
      "await"
    ],
    "correctAnswer": "suspend",
    "explanation": "The `suspend` keyword marks functions that can be suspended and resumed, enabling coroutine functionality.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `by` keyword do when used with properties?",
    "options": [
      "Creates inheritance",
      "Delegates property implementation",
      "Creates a backup property",
      "Makes property private"
    ],
    "correctAnswer": "Delegates property implementation",
    "explanation": "The `by` keyword is used for property delegation, allowing custom getter/setter logic to be reused.",
    "difficulty": "Medium"
  },
  {
    "question": "Which collection function transforms each element and flattens the result?",
    "options": [
      "map()",
      "filter()",
      "flatMap()",
      "fold()"
    ],
    "correctAnswer": "flatMap()",
    "explanation": "`flatMap()` applies a transformation function to each element and then flattens the results into a single collection.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the range operator in Kotlin?",
    "options": [
      "..",
      "...",
      "->",
      "=>"
    ],
    "correctAnswer": "..",
    "explanation": "The `..` operator creates an inclusive range, e.g., `1..10` includes both 1 and 10.",
    "difficulty": "Easy"
  },
  {
    "question": "Which keyword creates a compile-time constant in Kotlin?",
    "options": [
      "val",
      "const val",
      "final",
      "static"
    ],
    "correctAnswer": "const val",
    "explanation": "`const val` creates compile-time constants that can be used in annotations and other compile-time contexts.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `tailrec` keyword do?",
    "options": [
      "Makes function recursive",
      "Optimizes tail recursion",
      "Prevents recursion",
      "Limits recursion depth"
    ],
    "correctAnswer": "Optimizes tail recursion",
    "explanation": "`tailrec` tells the compiler to optimize tail-recursive functions into iterative loops to prevent stack overflow.",
    "difficulty": "Medium"
  },
  {
    "question": "Which scope function returns the receiver object?",
    "options": [
      "let",
      "run",
      "apply",
      "with"
    ],
    "correctAnswer": "apply",
    "explanation": "`apply` executes a block of code on an object and returns the object itself, useful for object configuration.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the difference between `Array<String>` and `Array<String?>`?",
    "options": [
      "No difference",
      "First is mutable, second is immutable",
      "First contains non-null strings, second can contain null",
      "First is for primitives, second for objects"
    ],
    "correctAnswer": "First contains non-null strings, second can contain null",
    "explanation": "`Array<String>` contains non-nullable strings, while `Array<String?>` can contain null values.",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword is used to create sealed classes?",
    "options": [
      "sealed",
      "final",
      "closed",
      "restricted"
    ],
    "correctAnswer": "sealed",
    "explanation": "`sealed` classes restrict inheritance to a known set of subclasses, useful for representing restricted hierarchies.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `inline` keyword do for functions?",
    "options": [
      "Makes function faster",
      "Replaces function calls with function body",
      "Makes function private",
      "Optimizes memory usage"
    ],
    "correctAnswer": "Replaces function calls with function body",
    "explanation": "`inline` functions have their body copied to call sites, reducing function call overhead, especially useful with lambdas.",
    "difficulty": "Medium"
  },
  {
    "question": "Which operator is used to check if an object is of a certain type?",
    "options": [
      "instanceof",
      "is",
      "typeof",
      "as"
    ],
    "correctAnswer": "is",
    "explanation": "The `is` operator checks if an object is an instance of a specific type, similar to Java's `instanceof`.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `reified` keyword do?",
    "options": [
      "Makes type parameters available at runtime",
      "Creates real objects",
      "Optimizes performance",
      "Prevents type erasure"
    ],
    "correctAnswer": "Makes type parameters available at runtime",
    "explanation": "`reified` can only be used with inline functions and makes type parameters accessible at runtime.",
    "difficulty": "Hard"
  },
  {
    "question": "Which function is used to create a lazy-initialized property?",
    "options": [
      "lazy()",
      "delay()",
      "defer()",
      "late()"
    ],
    "correctAnswer": "lazy()",
    "explanation": "`lazy()` creates a property that is computed only on first access and cached for subsequent uses.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the return type of functions that never return normally?",
    "options": [
      "Unit",
      "Void",
      "Nothing",
      "Never"
    ],
    "correctAnswer": "Nothing",
    "explanation": "`Nothing` is used for functions that never return normally (always throw exceptions or contain infinite loops).",
    "difficulty": "Medium"
  },
  {
    "question": "Which annotation is used to suppress compiler warnings?",
    "options": [
      "@SuppressWarnings",
      "@Suppress",
      "@Ignore",
      "@Warning"
    ],
    "correctAnswer": "@Suppress",
    "explanation": "`@Suppress` is used to suppress specific compiler warnings in Kotlin.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `when` expression replace from Java?",
    "options": [
      "if-else",
      "switch",
      "try-catch",
      "for loop"
    ],
    "correctAnswer": "switch",
    "explanation": "`when` is Kotlin's replacement for Java's switch statement, but more powerful and flexible.",
    "difficulty": "Easy"
  },
  {
    "question": "Which keyword is used to create anonymous inner classes in Kotlin?",
    "options": [
      "anonymous",
      "inner",
      "object",
      "class"
    ],
    "correctAnswer": "object",
    "explanation": "Anonymous objects are created using the `object` keyword followed by a supertype or interface.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the safe cast operator in Kotlin?",
    "options": [
      "as",
      "as?",
      "is",
      "!is"
    ],
    "correctAnswer": "as?",
    "explanation": "`as?` performs safe casting, returning null if the cast is not possible instead of throwing an exception.",
    "difficulty": "Easy"
  },
  {
    "question": "Which function creates a mutable map in Kotlin?",
    "options": [
      "mapOf()",
      "mutableMapOf()",
      "hashMapOf()",
      "createMap()"
    ],
    "correctAnswer": "mutableMapOf()",
    "explanation": "`mutableMapOf()` creates a mutable map, while `mapOf()` creates an immutable map.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `vararg` keyword do?",
    "options": [
      "Creates variable arguments",
      "Makes arguments optional",
      "Creates array arguments",
      "Validates arguments"
    ],
    "correctAnswer": "Creates variable arguments",
    "explanation": "`vararg` allows a function to accept a variable number of arguments of the same type.",
    "difficulty": "Easy"
  },
  {
    "question": "Which operator is used for range exclusion?",
    "options": [
      "..",
      "until",
      "downTo",
      "step"
    ],
    "correctAnswer": "until",
    "explanation": "`until` creates a range that excludes the end value, e.g., `1 until 10` goes from 1 to 9.",
    "difficulty": "Easy"
  },
  {
    "question": "What is a companion object in Kotlin?",
    "options": [
      "A singleton class",
      "Static members container",
      "Helper object",
      "Inner class"
    ],
    "correctAnswer": "Static members container",
    "explanation": "Companion objects provide a way to create static-like members in Kotlin classes.",
    "difficulty": "Medium"
  },
  {
    "question": "Which scope function executes a block and returns its result?",
    "options": [
      "apply",
      "also",
      "let",
      "run"
    ],
    "correctAnswer": "let",
    "explanation": "`let` executes a block of code and returns the result of the block, not the receiver object.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `crossinline` keyword do?",
    "options": [
      "Prevents non-local returns",
      "Creates cross-platform code",
      "Enables inline functions",
      "Optimizes performance"
    ],
    "correctAnswer": "Prevents non-local returns",
    "explanation": "`crossinline` prevents lambda parameters from performing non-local returns in inline functions.",
    "difficulty": "Hard"
  },
  {
    "question": "Which function is used to create a sequence in Kotlin?",
    "options": [
      "listOf()",
      "sequenceOf()",
      "arrayOf()",
      "setOf()"
    ],
    "correctAnswer": "sequenceOf()",
    "explanation": "`sequenceOf()` creates a sequence, which is a lazily-evaluated collection in Kotlin.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the purpose of the `internal` visibility modifier?",
    "options": [
      "Same as protected",
      "Visible within the same module",
      "Visible within the same package",
      "Same as private"
    ],
    "correctAnswer": "Visible within the same module",
    "explanation": "`internal` makes declarations visible anywhere within the same module (e.g., a Gradle project).",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword is used to handle exceptions in Kotlin?",
    "options": [
      "catch",
      "try",
      "throw",
      "All of the above"
    ],
    "correctAnswer": "All of the above",
    "explanation": "Kotlin uses `try`, `catch`, and `throw` keywords for exception handling, similar to Java.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `noinline` keyword do?",
    "options": [
      "Prevents function inlining",
      "Prevents lambda inlining",
      "Optimizes performance",
      "Creates normal functions"
    ],
    "correctAnswer": "Prevents lambda inlining",
    "explanation": "`noinline` prevents specific lambda parameters from being inlined in inline functions.",
    "difficulty": "Hard"
  },
  {
    "question": "Which collection function filters elements based on a predicate?",
    "options": [
      "map()",
      "filter()",
      "reduce()",
      "fold()"
    ],
    "correctAnswer": "filter()",
    "explanation": "`filter()` returns a new collection containing only elements that match the given predicate.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the difference between `==` and `===` in Kotlin?",
    "options": [
      "No difference",
      "== for structural equality, === for referential equality",
      "== for numbers, === for objects",
      "== is deprecated"
    ],
    "correctAnswer": "== for structural equality, === for referential equality",
    "explanation": "`==` checks if objects are equal in value, while `===` checks if they are the same instance.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function creates an immutable set in Kotlin?",
    "options": [
      "setOf()",
      "mutableSetOf()",
      "hashSetOf()",
      "linkedSetOf()"
    ],
    "correctAnswer": "setOf()",
    "explanation": "`setOf()` creates an immutable set, while `mutableSetOf()` creates a mutable set.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `use` function do?",
    "options": [
      "Uses a resource",
      "Automatically closes resources",
      "Reuses objects",
      "Validates usage"
    ],
    "correctAnswer": "Automatically closes resources",
    "explanation": "`use` ensures that resources implementing `Closeable` are automatically closed after use, similar to try-with-resources.",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword makes a property abstract?",
    "options": [
      "virtual",
      "abstract",
      "open",
      "override"
    ],
    "correctAnswer": "abstract",
    "explanation": "`abstract` properties must be implemented by subclasses and cannot have initializers.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the purpose of string templates in Kotlin?",
    "options": [
      "String formatting",
      "String interpolation",
      "Template patterns",
      "String validation"
    ],
    "correctAnswer": "String interpolation",
    "explanation": "String templates allow embedding expressions inside strings using `$variable` or `${expression}` syntax.",
    "difficulty": "Easy"
  },
  {
    "question": "Which function transforms a collection to a single value?",
    "options": [
      "map()",
      "filter()",
      "reduce()",
      "forEach()"
    ],
    "correctAnswer": "reduce()",
    "explanation": "`reduce()` applies a binary operation to collection elements to produce a single result.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `typealias` keyword do?",
    "options": [
      "Creates new types",
      "Creates type shortcuts",
      "Validates types",
      "Converts types"
    ],
    "correctAnswer": "Creates type shortcuts",
    "explanation": "`typealias` provides alternative names for existing types, improving code readability.",
    "difficulty": "Medium"
  },
  {
    "question": "Which operator creates a Pair in Kotlin?",
    "options": [
      "pair",
      "to",
      "->",
      "=>"
    ],
    "correctAnswer": "to",
    "explanation": "The `to` infix function creates a Pair, commonly used in maps: `\"key\" to \"value\"`.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the default parameter passing mechanism in Kotlin?",
    "options": [
      "Pass by value",
      "Pass by reference",
      "Pass by name",
      "Depends on type"
    ],
    "correctAnswer": "Pass by value",
    "explanation": "Kotlin uses pass-by-value for all parameters, where references to objects are passed by value.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function checks if all elements match a predicate?",
    "options": [
      "any()",
      "all()",
      "none()",
      "contains()"
    ],
    "correctAnswer": "all()",
    "explanation": "`all()` returns true if all elements in the collection match the given predicate.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `override` keyword do?",
    "options": [
      "Creates new methods",
      "Overrides parent methods",
      "Optimizes methods",
      "Validates methods"
    ],
    "correctAnswer": "Overrides parent methods",
    "explanation": "`override` is required when overriding methods or properties from parent classes or interfaces.",
    "difficulty": "Easy"
  },
  {
    "question": "Which collection function groups elements by a key?",
    "options": [
      "partition()",
      "groupBy()",
      "associate()",
      "sortedBy()"
    ],
    "correctAnswer": "groupBy()",
    "explanation": "`groupBy()` returns a map where keys are produced by the key selector and values are lists of elements.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the difference between `fold()` and `reduce()`?",
    "options": [
      "No difference",
      "fold() takes initial value, reduce() doesn't",
      "fold() is faster",
      "reduce() is deprecated"
    ],
    "correctAnswer": "fold() takes initial value, reduce() doesn't",
    "explanation": "`fold()` starts with an initial value, while `reduce()` uses the first element as the initial value.",
    "difficulty": "Medium"
  },
  {
    "question": "Which annotation marks a function as an operator?",
    "options": [
      "@Operator",
      "@Infix",
      "operator",
      "@Override"
    ],
    "correctAnswer": "operator",
    "explanation": "The `operator` modifier allows functions to be used with operator syntax (e.g., +, -, *, /).",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `also` scope function do?",
    "options": [
      "Returns lambda result",
      "Returns receiver object",
      "Creates copies",
      "Validates objects"
    ],
    "correctAnswer": "Returns receiver object",
    "explanation": "`also` executes a block for side effects and returns the original receiver object.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function creates a range in descending order?",
    "options": [
      "downTo",
      "descending",
      "reverse",
      "backward"
    ],
    "correctAnswer": "downTo",
    "explanation": "`downTo` creates a descending range, e.g., `10 downTo 1`.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the purpose of the `expect` keyword?",
    "options": [
      "Exception handling",
      "Multiplatform declarations",
      "Testing assertions",
      "Input validation"
    ],
    "correctAnswer": "Multiplatform declarations",
    "explanation": "`expect` declares platform-specific APIs in multiplatform projects, implemented with `actual` in platform modules.",
    "difficulty": "Hard"
  },
  {
    "question": "Which function checks if any element matches a predicate?",
    "options": [
      "all()",
      "any()",
      "none()",
      "contains()"
    ],
    "correctAnswer": "any()",
    "explanation": "`any()` returns true if at least one element matches the given predicate.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `step` function do in ranges?",
    "options": [
      "Sets increment value",
      "Validates ranges",
      "Creates steps",
      "Optimizes ranges"
    ],
    "correctAnswer": "Sets increment value",
    "explanation": "`step` defines the increment between consecutive elements in a range, e.g., `1..10 step 2`.",
    "difficulty": "Easy"
  },
  {
    "question": "Which visibility modifier makes members visible to subclasses?",
    "options": [
      "private",
      "protected",
      "internal",
      "public"
    ],
    "correctAnswer": "protected",
    "explanation": "`protected` members are visible in the class and its subclasses.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `with` scope function do?",
    "options": [
      "Creates objects with properties",
      "Executes block with object as receiver",
      "Validates objects",
      "Copies objects"
    ],
    "correctAnswer": "Executes block with object as receiver",
    "explanation": "`with` calls the specified block with the given receiver as `this` and returns the block result.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function finds the first element matching a predicate?",
    "options": [
      "find()",
      "first()",
      "single()",
      "get()"
    ],
    "correctAnswer": "find()",
    "explanation": "`find()` returns the first element matching the predicate, or null if none found.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the difference between `first()` and `firstOrNull()`?",
    "options": [
      "No difference",
      "first() throws exception if empty, firstOrNull() returns null",
      "first() is faster",
      "firstOrNull() is deprecated"
    ],
    "correctAnswer": "first() throws exception if empty, firstOrNull() returns null",
    "explanation": "`first()` throws an exception on empty collections, while `firstOrNull()` returns null.",
    "difficulty": "Medium"
  },
  {
    "question": "Which keyword is used to create type aliases?",
    "options": [
      "alias",
      "typealias",
      "typedef",
      "type"
    ],
    "correctAnswer": "typealias",
    "explanation": "`typealias` creates alternative names for existing types to improve code readability.",
    "difficulty": "Easy"
  },
  {
    "question": "What does the `run` scope function do?",
    "options": [
      "Runs functions",
      "Executes block and returns result",
      "Validates execution",
      "Optimizes performance"
    ],
    "correctAnswer": "Executes block and returns result",
    "explanation": "`run` executes a block of code and returns the result of the last expression.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function creates a map from a collection?",
    "options": [
      "toMap()",
      "associate()",
      "mapOf()",
      "createMap()"
    ],
    "correctAnswer": "associate()",
    "explanation": "`associate()` transforms collection elements into key-value pairs and returns a map.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the purpose of the `@JvmStatic` annotation?",
    "options": [
      "Makes methods static in Java",
      "Optimizes performance",
      "Validates Java interop",
      "Creates static imports"
    ],
    "correctAnswer": "Makes methods static in Java",
    "explanation": "`@JvmStatic` generates static methods in the compiled bytecode for Java interoperability.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function partitions a collection into two lists?",
    "options": [
      "split()",
      "partition()",
      "divide()",
      "separate()"
    ],
    "correctAnswer": "partition()",
    "explanation": "`partition()` returns a Pair of lists: elements matching the predicate and those that don't.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the `takeWhile()` function do?",
    "options": [
      "Takes elements while condition is true",
      "Takes a specific number of elements",
      "Takes elements randomly",
      "Takes the last elements"
    ],
    "correctAnswer": "Takes elements while condition is true",
    "explanation": "`takeWhile()` returns elements from the beginning while they satisfy the given predicate.",
    "difficulty": "Medium"
  },
  {
    "question": "Which function removes duplicate elements from a collection?",
    "options": [
      "unique()",
      "distinct()",
      "removeDuplicates()",
      "filter()"
    ],
    "correctAnswer": "distinct()",
    "explanation": "`distinct()` returns a list containing only distinct elements from the original collection.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the purpose of the `@JvmOverloads` annotation?",
    "options": [
      "Creates method overloads for default parameters",
      "Optimizes method calls",
      "Validates overloads",
      "Prevents overloading"
    ],
    "correctAnswer": "Creates method overloads for default parameters",
    "explanation": "`@JvmOverloads` generates overloaded methods for functions with default parameters for Java compatibility.",
    "difficulty": "Medium"
  }
]