[
  {
    "id": "1",
    "difficulty": "Easy",
    "question": "\uD83D\uDDE3\uFE0F You want to show a FloatingActionButton (FAB) only after scrolling past the first few items. You’ve got access to scroll state — now you need to connect that to visibility. How would you do it? Feel free to share code snippets!",
    "questionCode": "val listState = rememberLazyListState()\n\nLazyColumn(state = listState) {\n  items(100) { Text(\"Item $it\") }\n}\n\n// Show a FAB only when the first visible index > 4",
    "answerCode": "val listState = rememberLazyListState()\n\n// Solution: use derivedStateOf to efficiently compute visibility\nval showFab by remember {\n    derivedStateOf {\n        listState.firstVisibleItemIndex > 2\n    }\n}\n\n// Then use AnimatedVisibility with showFab to control the FAB\nAnimatedVisibility(\n    visible = showFab,\n    enter = fadeIn() + slideInVertically { it },\n    exit = fadeOut() + slideOutVertically { it }\n) {\n    FloatingActionButton(onClick = { /* Action */ }) {\n        // FAB content\n    }\n}"
  },
  {
    "id": "2",
    "difficulty": "Medium",
    "question": "\uD83D\uDDE3\uFE0F Below is a basic implementation of a LazyColumn. Will this work as expected, or do you think there is something wrong with the code? ",
    "questionCode": "LazyColumn {\n    items(comments.map { it.text }, key = { it }) { text ->\n        CommentCard(text)\n    }\n}",
    "answerCode": "Solution,\n \uD83D\uDD28\n\nAt first glance, it looks like we’re doing everything right: we’re using the key parameter in items(), and we’re rendering a stable list.\n\nBut here’s the gotcha: we’re keying the list by the comment text, not by the actual unique identity of each comment.\n\nIf two comments have the same text — which is common in real apps — the key is no longer unique. This leads to Compose treating different items as the same, resulting in a crash when when a duplicate key is found as the list is being scrolled.\n\nFix: Always use a true stable identifier, like a comment ID: LazyColumn {\n    items(comments, key = { it.id }) { comment ->\n        CommentCard(comment.text)\n    }\n}"
  },
  {
    "id": "3",
    "difficulty": "Hard",
    "question": "\uD83D\uDDE3\uFE0F This grid layout looks great on your device, but you’ve been tasked to ensure that it looks great on many form factors, like a tablet. Are you confident that this code will do just that? If not, then what would you change about it to make it truly adaptive?",
    "questionCode": "LazyVerticalGrid(\n  columns = GridCells.Fixed(2),\n  horizontalArrangement = Arrangement.spacedBy(24.dp),\n  verticalArrangement = Arrangement.spacedBy(24.dp),\n  contentPadding = PaddingValues(16.dp)\n) {\n  items(shoes) { shoe ->\n    ShopItemWithImage(shoe)\n  }\n}",
    "answerCode": "Solution,\n \uD83E\uDD73 \n\nUsing GridCells.Fixed(2) forces exactly two columns, no matter how wide the screen is. On wide layouts (landscape, tablets), that makes each column too wide, stretching your cards unnaturally and breaking image aspect ratios.\n\nThe correct solution is to use GridCells.Adaptive(minSize), which calculates the number of columns based on available width and a minimum item width — keeping your cards looking good across screen sizes.\n\n            LazyVerticalGrid(\n                columns = GridCells.Adaptive(minSize = 128.dp),\n                horizontalArrangement = Arrangement.spacedBy(24.dp),\n                verticalArrangement = Arrangement.spacedBy(24.dp),\n                contentPadding = PaddingValues(16.dp)\n            ) {\n                items(shoes) { shoe ->\n                    ShopItemWithImage(shoe)\n                }\n            }"
  },
  {
    "id": "4",
    "difficulty": "Hard",
    "question": "\uD83D\uDDE3\uFE0F The following snippet can cause you to have some real headaches! Considering that the Service class is bound to a lifecycle and that it can launch many coroutines from this scope, what are the two (2) bugs you can see happening when using this code?",
    "questionCode": "import android.app.Service\n\nclass NotificationService : Service() {\n\n    private val serviceScope = CoroutineScope(Dispatchers.Default)\n\n    override fun onBind(intent: Intent?): IBinder? {\n        // Your custom logic here\n        return null\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n    }\n}",
    "answerCode": "Solution,\n\uD83D\uDC1B Bug #1: Scope Not Cancelled on onDestroy()\n\nWithout serviceScope.cancel(), all launched coroutines keep running until they have completed—even after the service is destroyed. That’s a classic memory leak risk.\n\n\uD83D\uDC1B Bug #2: Not Using SupervisorJob()\n\nA normal coroutine scope will get cancelled when any of its child coroutines throw an exception, which in most cases is not something that you want when creating such lifecycle-scoped coroutine scopes (similar to the built-in viewModelScope and lifecycleScope who also use SupervisorJob() under the hood)\n\nSupervisorJob() is unique because it prevents a failure in one child coroutine to cancel any of its siblings or the scope itself.\n\n\n import android.app.Service\n\nclass NotificationService : Service() {\n\n    private val serviceScope = CoroutineScope(Dispatchers.Default + SupervisorJob())\n\n    override fun onBind(intent: Intent?): IBinder? {\n        return null\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        serviceScope.cancel()\n    }\n}"
  }
]