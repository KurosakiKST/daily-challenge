[
  {
    "question": "Which component is responsible for providing a user interface in Android?",
    "options": [
      "Service",
      "BroadcastReceiver",
      "ContentProvider",
      "Activity"
    ],
    "correctAnswer": "Activity",
    "explanation": "An Activity in Android represents a single screen with a user interface.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the purpose of ViewModel in Android Architecture Components?",
    "options": [
      "To display UI elements",
      "To hold UI-related data in a lifecycle-conscious way",
      "To observe LiveData changes",
      "To store database schema"
    ],
    "correctAnswer": "To hold UI-related data in a lifecycle-conscious way",
    "explanation": "ViewModel is designed to store and manage UI-related data while surviving configuration changes.",
    "difficulty": "Medium"
  },
  {
    "question": "Which Jetpack library is used to manage UI navigation within an Android app?",
    "options": [
      "Room",
      "LiveData",
      "Navigation",
      "DataStore"
    ],
    "correctAnswer": "Navigation",
    "explanation": "The Navigation component helps manage app navigation and back stack with a Navigation Graph.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the function of the onCreate() method in an Android Activity?",
    "options": [
      "Initializes the database",
      "Starts the app",
      "Sets up the activity's initial state",
      "Handles user input"
    ],
    "correctAnswer": "Sets up the activity's initial state",
    "explanation": "onCreate() is called when the activity is first created and is used to initialize UI and components.",
    "difficulty": "Easy"
  },
  {
    "question": "What lifecycle method is called when an activity becomes visible to the user?",
    "options": [
      "onStop()",
      "onStart()",
      "onPause()",
      "onDestroy()"
    ],
    "correctAnswer": "onStart()",
    "explanation": "onStart() is called when the activity is becoming visible to the user.",
    "difficulty": "Easy"
  },
  {
    "question": "Which component is used to run background tasks even after the app is killed?",
    "options": [
      "Activity",
      "Fragment",
      "Service",
      "BroadcastReceiver"
    ],
    "correctAnswer": "Service",
    "explanation": "Services allow execution of tasks in the background, independent of user interaction.",
    "difficulty": "Medium"
  },
  {
    "question": "What does LiveData provide in Android?",
    "options": [
      "Persistent storage",
      "Background services",
      "Observable data holder",
      "UI rendering"
    ],
    "correctAnswer": "Observable data holder",
    "explanation": "LiveData is an observable data holder that respects lifecycle changes.",
    "difficulty": "Medium"
  },
  {
    "question": "What is Jetpack Compose?",
    "options": [
      "A testing library",
      "A navigation component",
      "A declarative UI toolkit",
      "A background service manager"
    ],
    "correctAnswer": "A declarative UI toolkit",
    "explanation": "Jetpack Compose is Android's modern toolkit for building native UIs declaratively.",
    "difficulty": "Medium"
  },
  {
    "question": "Which class is used to request runtime permissions?",
    "options": [
      "Intent",
      "ActivityCompat",
      "PermissionManager",
      "PermissionChecker"
    ],
    "correctAnswer": "ActivityCompat",
    "explanation": "ActivityCompat.requestPermissions() is used for requesting runtime permissions.",
    "difficulty": "Medium"
  },
  {
    "question": "Which database library is part of Jetpack?",
    "options": [
      "SQLite",
      "Room",
      "Realm",
      "Firebase"
    ],
    "correctAnswer": "Room",
    "explanation": "Room is a Jetpack library that provides an abstraction layer over SQLite.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the function of the ViewBinding feature?",
    "options": [
      "Compiles layouts at runtime",
      "Generates binding classes for layouts",
      "Serializes data",
      "Manages navigation"
    ],
    "correctAnswer": "Generates binding classes for layouts",
    "explanation": "ViewBinding generates binding classes at compile time for each XML layout.",
    "difficulty": "Easy"
  },
  {
    "question": "Which Android manifest tag declares an app's entry point?",
    "options": [
      "<service>",
      "<activity>",
      "<intent-filter>",
      "<application>"
    ],
    "correctAnswer": "<intent-filter>",
    "explanation": "<intent-filter> with action MAIN and category LAUNCHER marks the entry point.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the purpose of WorkManager?",
    "options": [
      "Schedule tasks that run immediately",
      "Handle UI transitions",
      "Manage foreground services",
      "Schedule deferrable background work"
    ],
    "correctAnswer": "Schedule deferrable background work",
    "explanation": "WorkManager is used for background tasks that should be guaranteed to execute.",
    "difficulty": "Medium"
  },
  {
    "question": "Which Android component is designed to handle asynchronous broadcasts?",
    "options": [
      "Service",
      "BroadcastReceiver",
      "Activity",
      "ContentProvider"
    ],
    "correctAnswer": "BroadcastReceiver",
    "explanation": "BroadcastReceiver is used to respond to system-wide broadcast announcements.",
    "difficulty": "Medium"
  },
  {
    "question": "Which class is used to start a new activity?",
    "options": [
      "Context",
      "Intent",
      "ViewModel",
      "Fragment"
    ],
    "correctAnswer": "Intent",
    "explanation": "Intent is a messaging object used to request an action from another app component.",
    "difficulty": "Easy"
  },
  {
    "question": "What is the use of the Navigation Graph in Jetpack Navigation Component?",
    "options": [
      "Manage UI styles",
      "Manage dependencies",
      "Define all navigation paths",
      "Define database schema"
    ],
    "correctAnswer": "Define all navigation paths",
    "explanation": "The Navigation Graph is an XML resource that defines all the navigation paths and destinations within an app.",
    "difficulty": "Medium"
  },
  {
    "question": "What is the main advantage of using Kotlin over Java for Android development?",
    "options": [
      "More verbose syntax",
      "No support for coroutines",
      "Better null safety and concise syntax",
      "Slower performance"
    ],
    "correctAnswer": "Better null safety and concise syntax",
    "explanation": "Kotlin offers concise syntax, improved type-safety, and null-safety compared to Java.",
    "difficulty": "Easy"
  },
  {
    "question": "Which Android component is used for persistent key-value storage?",
    "options": [
      "Room",
      "SharedPreferences",
      "DataStore",
      "Bundle"
    ],
    "correctAnswer": "SharedPreferences",
    "explanation": "SharedPreferences is used to store primitive data in key-value pairs.",
    "difficulty": "Easy"
  },
  {
    "question": "Which of the following is NOT a valid Android app component?",
    "options": [
      "Service",
      "ContentProvider",
      "Intent",
      "Activity"
    ],
    "correctAnswer": "Intent",
    "explanation": "Intent is not a component, but a messaging object. The main components are Activity, Service, BroadcastReceiver, and ContentProvider.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the keyword 'lateinit' mean in Kotlin?",
    "options": [
      "Initializes variable at compile time",
      "Declares a nullable type",
      "Declares a variable that will be initialized later",
      "Initializes variable in constructor only"
    ],
    "correctAnswer": "Declares a variable that will be initialized later",
    "explanation": "lateinit allows you to declare a non-null variable that will be initialized later.",
    "difficulty": "Medium"
  },
  {
    "question": "Which tool converts XML layout to Kotlin/Java objects?",
    "options": [
      "RecyclerView",
      "ViewBinding",
      "LiveData",
      "Room"
    ],
    "correctAnswer": "ViewBinding",
    "explanation": "ViewBinding generates a binding class for each XML layout, providing type-safe access to views.",
    "difficulty": "Easy"
  },
  {
    "question": "What annotation is used to denote a Room entity?",
    "options": [
      "@Database",
      "@Dao",
      "@Entity",
      "@ColumnInfo"
    ],
    "correctAnswer": "@Entity",
    "explanation": "@Entity annotation is used to define a data class as a table in Room database.",
    "difficulty": "Medium"
  },
  {
    "question": "What does the term 'recomposition' refer to in Jetpack Compose?",
    "options": [
      "Redrawing XML layouts",
      "Recalculating LiveData",
      "Updating the UI when state changes",
      "Restarting the app"
    ],
    "correctAnswer": "Updating the UI when state changes",
    "explanation": "Recomposition in Compose is the process of updating the UI automatically when state changes.",
    "difficulty": "Medium"
  }
]
