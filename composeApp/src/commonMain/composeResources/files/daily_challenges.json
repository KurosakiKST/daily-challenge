[
  {
    "id": "1",
    "difficulty": "Easy",
    "question": "\uD83D\uDDE3\uFE0F You want to show a FloatingActionButton (FAB) only after scrolling past the first few items. You’ve got access to scroll state — now you need to connect that to visibility. How would you do it? Feel free to share code snippets!",
    "questionCode": "val listState = rememberLazyListState()\n\nLazyColumn(state = listState) {\n  items(100) { Text(\"Item $it\") }\n}\n\n// Show a FAB only when the first visible index > 4",
    "answerCode": "val listState = rememberLazyListState()\n\n// Solution: use derivedStateOf to efficiently compute visibility\nval showFab by remember {\n    derivedStateOf {\n        listState.firstVisibleItemIndex > 2\n    }\n}\n\n// Then use AnimatedVisibility with showFab to control the FAB\nAnimatedVisibility(\n    visible = showFab,\n    enter = fadeIn() + slideInVertically { it },\n    exit = fadeOut() + slideOutVertically { it }\n) {\n    FloatingActionButton(onClick = { /* Action */ }) {\n        // FAB content\n    }\n}"
  },
  {
    "id": "2",
    "difficulty": "Medium",
    "question": "\uD83D\uDDE3\uFE0F Below is a basic implementation of a LazyColumn. Will this work as expected, or do you think there is something wrong with the code? ",
    "questionCode": "LazyColumn {\n    items(comments.map { it.text }, key = { it }) { text ->\n        CommentCard(text)\n    }\n}",
    "answerCode": "Solution,\n \uD83D\uDD28\n\nAt first glance, it looks like we’re doing everything right: we’re using the key parameter in items(), and we’re rendering a stable list.\n\nBut here’s the gotcha: we’re keying the list by the comment text, not by the actual unique identity of each comment.\n\nIf two comments have the same text — which is common in real apps — the key is no longer unique. This leads to Compose treating different items as the same, resulting in a crash when when a duplicate key is found as the list is being scrolled.\n\nFix: Always use a true stable identifier, like a comment ID: LazyColumn {\n    items(comments, key = { it.id }) { comment ->\n        CommentCard(comment.text)\n    }\n}"
  },
  {
    "id": "3",
    "difficulty": "Hard",
    "question": "\uD83D\uDDE3\uFE0F This grid layout looks great on your device, but you’ve been tasked to ensure that it looks great on many form factors, like a tablet. Are you confident that this code will do just that? If not, then what would you change about it to make it truly adaptive?",
    "questionCode": "LazyVerticalGrid(\n  columns = GridCells.Fixed(2),\n  horizontalArrangement = Arrangement.spacedBy(24.dp),\n  verticalArrangement = Arrangement.spacedBy(24.dp),\n  contentPadding = PaddingValues(16.dp)\n) {\n  items(shoes) { shoe ->\n    ShopItemWithImage(shoe)\n  }\n}",
    "answerCode": "Solution,\n \uD83E\uDD73 \n\nUsing GridCells.Fixed(2) forces exactly two columns, no matter how wide the screen is. On wide layouts (landscape, tablets), that makes each column too wide, stretching your cards unnaturally and breaking image aspect ratios.\n\nThe correct solution is to use GridCells.Adaptive(minSize), which calculates the number of columns based on available width and a minimum item width — keeping your cards looking good across screen sizes.\n\n            LazyVerticalGrid(\n                columns = GridCells.Adaptive(minSize = 128.dp),\n                horizontalArrangement = Arrangement.spacedBy(24.dp),\n                verticalArrangement = Arrangement.spacedBy(24.dp),\n                contentPadding = PaddingValues(16.dp)\n            ) {\n                items(shoes) { shoe ->\n                    ShopItemWithImage(shoe)\n                }\n            }"
  },
  {
    "id": "4",
    "difficulty": "Hard",
    "question": "\uD83D\uDDE3\uFE0F The following snippet can cause you to have some real headaches! Considering that the Service class is bound to a lifecycle and that it can launch many coroutines from this scope, what are the two (2) bugs you can see happening when using this code?",
    "questionCode": "import android.app.Service\n\nclass NotificationService : Service() {\n\n    private val serviceScope = CoroutineScope(Dispatchers.Default)\n\n    override fun onBind(intent: Intent?): IBinder? {\n        // Your custom logic here\n        return null\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n    }\n}",
    "answerCode": "Solution,\n\uD83D\uDC1B Bug #1: Scope Not Cancelled on onDestroy()\n\nWithout serviceScope.cancel(), all launched coroutines keep running until they have completed—even after the service is destroyed. That’s a classic memory leak risk.\n\n\uD83D\uDC1B Bug #2: Not Using SupervisorJob()\n\nA normal coroutine scope will get cancelled when any of its child coroutines throw an exception, which in most cases is not something that you want when creating such lifecycle-scoped coroutine scopes (similar to the built-in viewModelScope and lifecycleScope who also use SupervisorJob() under the hood)\n\nSupervisorJob() is unique because it prevents a failure in one child coroutine to cancel any of its siblings or the scope itself.\n\n\n import android.app.Service\n\nclass NotificationService : Service() {\n\n    private val serviceScope = CoroutineScope(Dispatchers.Default + SupervisorJob())\n\n    override fun onBind(intent: Intent?): IBinder? {\n        return null\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        serviceScope.cancel()\n    }\n}"
  },
  {
    "id": "5",
    "difficulty": "Easy",
    "question": "🧭 You're using a ViewModel to fetch a list of items. But you notice the API gets called multiple times across recompositions. What's the cause and fix?",
    "questionCode": "@Composable\nfun ProductScreen(viewModel: ProductViewModel = viewModel()) {\n    val products by viewModel.products.collectAsState()\n    viewModel.loadProducts() // This is called on every recomposition!\n\n    LazyColumn {\n        items(products) {\n            Text(it.name)\n        }\n    }\n}",
    "answerCode": "✅ The issue is calling `loadProducts()` inside the Composable. It will be triggered on every recomposition.\n\n💡 Fix it using `LaunchedEffect`:\n\nLaunchedEffect(Unit) {\n    viewModel.loadProducts()\n}"
  },
  {
    "id": "6",
    "difficulty": "Medium",
    "question": "🔐 You are building a login screen with Jetpack Compose and want to prevent the button from being spammed (double clicks). What is a safe way to do this?",
    "questionCode": "Button(onClick = {\n    loginUser()\n}) {\n    Text(\"Login\")\n}",
    "answerCode": "✅ The issue is multiple quick taps might fire multiple login requests.\n\n💡 Fix it by disabling the button while loading:\n\nvar loading by remember { mutableStateOf(false) }\n\nButton(\n    onClick = {\n        loading = true\n        loginUser(onComplete = { loading = false })\n    },\n    enabled = !loading\n) {\n    if (loading) CircularProgressIndicator()\n    else Text(\"Login\")\n}"
  },
  {
    "id": "7",
    "difficulty": "Easy",
    "question": "🎨 Why does your Jetpack Compose list flicker when data updates, even when the list items look the same?",
    "questionCode": "LazyColumn {\n    items(itemsList) { item ->\n        Text(item.title)\n    }\n}",
    "answerCode": "⚠️ If items are re-created or lack stable identity, Compose can't preserve state or animations properly.\n\n✅ Use a stable key to prevent flickering:\n\nLazyColumn {\n    items(itemsList, key = { it.id }) { item ->\n        Text(item.title)\n    }\n}"
  },
  {
    "id": "8",
    "difficulty": "Hard",
    "question": "📦 You’re caching images from the internet using Coil in Compose. But your image flashes every time recomposition happens. Why?",
    "questionCode": "Image(\n    painter = rememberAsyncImagePainter(url),\n    contentDescription = null\n)",
    "answerCode": "✅ Coil uses rememberAsyncImagePainter internally but recomposition resets it if `url` changes.\n\n💡 Wrap it properly to avoid image flickering:\n\nval painter = remember(url) {\n    rememberAsyncImagePainter(url)\n}\n\nImage(painter = painter, contentDescription = null)"
  },
  {
    "id": "9",
    "difficulty": "Medium",
    "question": "📱 Why is your screen content covered by the system status bar when running on a newer Android version?",
    "questionCode": "setContent {\n    MyApp()\n}",
    "answerCode": "✅ Newer Android versions (API 30+) require using WindowInsets to manage system bars.\n\n💡 Add this before setContent:\n\nWindowCompat.setDecorFitsSystemWindows(window, false)\n\nThen inside Compose:\n\nBox(Modifier.padding(WindowInsets.systemBars.asPaddingValues())) { ... }"
  },
  {
    "id": "10",
    "difficulty": "Medium",
    "question": "🧵 You’re launching multiple coroutines inside a ViewModel. What are common mistakes that lead to crashes or leaks?",
    "questionCode": "viewModelScope.launch {\n    fetchData1()\n}\n\nviewModelScope.launch {\n    fetchData2()\n}",
    "answerCode": "⚠️ Mistake: Launching multiple coroutines without proper error isolation. If one fails, all others get cancelled.\n\n✅ Use `supervisorScope` to isolate them:\n\nviewModelScope.launch {\n    supervisorScope {\n        launch { fetchData1() }\n        launch { fetchData2() }\n    }\n}"
  },
  {
    "id": "11",
    "difficulty": "Easy",
    "question": "💾 You’re using `remember` to store UI state. But on device rotation, the state resets. How do you fix this?",
    "questionCode": "var count by remember { mutableStateOf(0) }",
    "answerCode": "✅ Use `rememberSaveable` instead of `remember` to persist across recompositions and configuration changes:\n\nvar count by rememberSaveable { mutableStateOf(0) }"
  },
  {
    "id": "12",
    "difficulty": "Hard",
    "question": "🧪 Why does your Jetpack Compose test fail to find a Button with `Text(\"Submit\")`, even though it’s visible on screen?",
    "questionCode": "Button(onClick = {}) {\n    Text(\"Submit\")\n}",
    "answerCode": "✅ Compose Test uses semantics. You may need to add a `testTag` for reliability:\n\nButton(\n    onClick = {},\n    modifier = Modifier.testTag(\"submit_button\")\n) {\n    Text(\"Submit\")\n}\n\n// In test:\nonNodeWithTag(\"submit_button\").assertIsDisplayed()"
  },
  {
    "id": "13",
    "difficulty": "Medium",
    "question": "🎯 You want to throttle search input so it doesn't fire an API call on every keystroke. What's the best way?",
    "questionCode": "TextField(value = query, onValueChange = { query = it })",
    "answerCode": "✅ Use `debounce` operator on a `Flow`:\n\nval queryFlow = MutableStateFlow(\"\")\n\nLaunchedEffect(Unit) {\n    queryFlow\n        .debounce(300)\n        .distinctUntilChanged()\n        .collect { viewModel.search(it) }\n}"
  },
  {
    "id": "14",
    "difficulty": "Hard",
    "question": "🧯 You’re getting 'java.lang.IllegalStateException: LifecycleOwner has been garbage collected' when collecting a Flow. What’s wrong?",
    "questionCode": "viewModel.dataFlow.collect { value -> ... }",
    "answerCode": "⚠️ This collect runs on a non-lifecycle-aware scope.\n\n✅ Use `collectAsState()` or lifecycle-aware collectors:\n\nlifecycleScope.launch {\n    repeatOnLifecycle(Lifecycle.State.STARTED) {\n        viewModel.dataFlow.collect { ... }\n    }\n}"
  },
  {
    "id": "15",
    "difficulty": "Medium",
    "question": "📊 You display a loading spinner while fetching data. But it never disappears. What’s going wrong?",
    "questionCode": "val loading = MutableStateFlow(true)\n\nLaunchedEffect(Unit) {\n    val data = fetchData()\n    loading.value = false\n}",
    "answerCode": "✅ If `fetchData()` throws an exception, `loading.value = false` is never reached.\n\n💡 Use `try-finally`:\n\nLaunchedEffect(Unit) {\n    try {\n        fetchData()\n    } finally {\n        loading.value = false\n    }\n}"
  },
  {
    "id": "16",
    "difficulty": "Easy",
    "question": "📏 You want a box to take half the screen height in Compose. What’s the best way?",
    "questionCode": "// Inside Column\nBox(\n    modifier = Modifier.height(/** half height? **/)\n)",
    "answerCode": "✅ Use `fillMaxHeight(0.5f)` for half the height:\n\nBox(\n    modifier = Modifier\n        .fillMaxWidth()\n        .fillMaxHeight(0.5f)\n)"
  },
  {
    "id": "17",
    "difficulty": "Hard",
    "question": "🧠 Your `remember` value seems to reset unexpectedly. What are common causes?",
    "questionCode": "val state = remember { expensiveComputation() }",
    "answerCode": "⚠️ Common cause: `remember` used inside a lambda or not keyed properly.\n\n✅ Use `key` if the value depends on inputs:\n\nval state = remember(key) { expensiveComputation(key) }"
  },
  {
    "id": "18",
    "difficulty": "Medium",
    "question": "📥 How can you handle back press in Jetpack Compose screens cleanly?",
    "questionCode": "// In Compose screen",
    "answerCode": "✅ Use `BackHandler`:\n\nBackHandler(enabled = true) {\n    navController.popBackStack()\n}"
  },
  {
    "id": "19",
    "difficulty": "Medium",
    "question": "💥 Your app crashes when navigating quickly between Compose screens. Why?",
    "questionCode": "// NavHost + Compose Screens",
    "answerCode": "⚠️ You might be using mutable state without a proper `rememberSaveable`, leading to null or reused ViewModels.\n\n✅ Always scope ViewModels properly and preserve state with `rememberSaveable` when needed."
  },
  {
    "id": "20",
    "difficulty": "Medium",
    "question": "🛑 Why does your `LaunchedEffect` run multiple times unexpectedly?",
    "questionCode": "LaunchedEffect(someList) { /* do something */ }",
    "answerCode": "⚠️ If `someList` is a new object each recomposition (e.g., `List()`), LaunchedEffect restarts.\n\n✅ Use stable keys or `remember` the list:\n\nval stableList = remember { someList }\nLaunchedEffect(stableList) { ... }"
  },
  {
    "id": "21",
    "difficulty": "Hard",
    "question": "🧼 Your SharedFlow is missing some values in the UI. Why?",
    "questionCode": "val flow = MutableSharedFlow<Int>()\n\nLaunchedEffect(Unit) {\n    flow.collect { ... }\n}",
    "answerCode": "⚠️ SharedFlow requires subscribers to be active before emitting.\n\n✅ Use `replay` or `StateFlow` if you want to retain the last value:\n\nval flow = MutableStateFlow(0)\n\nOR\n\nval flow = MutableSharedFlow<Int>(replay = 1)"
  },
  {
    "id": "22",
    "difficulty": "Easy",
    "question": "🧪 You want to test your ViewModel with Coroutine APIs. What setup is required?",
    "questionCode": "// ViewModelTest",
    "answerCode": "✅ Use `MainDispatcherRule` and `runTest {}`\n\n@get:Rule\nval rule = MainDispatcherRule()\n\n@Test\nfun testSomething() = runTest {\n    // your test logic\n}"
  },
  {
    "id": "23",
    "difficulty": "Hard",
    "question": "🚀 Your long-running background task keeps UI thread busy. What’s wrong?",
    "questionCode": "viewModelScope.launch {\n    val result = heavyComputation()\n}",
    "answerCode": "⚠️ Computation is running on Main thread.\n\n✅ Use proper dispatcher:\n\nviewModelScope.launch(Dispatchers.Default) {\n    val result = heavyComputation()\n}"
  },
  {
    "id": "24",
    "difficulty": "Medium",
    "question": "📤 You're uploading a file and want to show progress in Compose. How do you expose that?",
    "questionCode": "// Upload code in ViewModel",
    "answerCode": "✅ Use `StateFlow` to expose progress:\n\nval uploadProgress = MutableStateFlow(0f)\n\nfun uploadFile() {\n    viewModelScope.launch {\n        for (i in 0..100) {\n            delay(50)\n            uploadProgress.value = i / 100f\n        }\n    }\n}"
  },
  {
    "id": "25",
    "difficulty": "Easy",
    "question": "🛠️ You want to show a FloatingActionButton (FAB) only after scrolling past the first few items. You’ve got access to scroll state — now you need to connect that to visibility. How would you do it? Feel free to share code snippets!",
    "questionCode": "val listState = rememberLazyListState()\n\nLazyColumn(state = listState) {\n  items(100) { Text(\"Item $it\") }\n}\n\n// Show a FAB only when the first visible index > 4",
    "answerCode": "val listState = rememberLazyListState()\n\nval showFab by remember {\n    derivedStateOf {\n        listState.firstVisibleItemIndex > 2\n    }\n}\n\nAnimatedVisibility(\n    visible = showFab,\n    enter = fadeIn() + slideInVertically { it },\n    exit = fadeOut() + slideOutVertically { it }\n) {\n    FloatingActionButton(onClick = { /* Action */ }) {\n        // FAB content\n    }\n}"
  },
  {
    "id": "26",
    "difficulty": "Easy",
    "question": "📲 You want to prevent multiple rapid taps on a button that causes duplicate network calls. How would you debounce the click in a Jetpack Compose Button?",
    "questionCode": "Button(onClick = { /* network call */ }) {\n    Text(\"Submit\")\n}",
    "answerCode": "var isClickAllowed by remember { mutableStateOf(true) }\n\nButton(onClick = {\n    if (isClickAllowed) {\n        isClickAllowed = false\n        coroutineScope.launch {\n            delay(1000)\n            isClickAllowed = true\n        }\n        // Trigger network call\n    }\n}) {\n    Text(\"Submit\")\n}"
  },
  {
    "id": "27",
    "difficulty": "Medium",
    "question": "🔄 You need to collect a `Flow` in Compose and recompose only when the value changes. What is the best way to do that?",
    "questionCode": "val myFlow: Flow<Int> = viewModel.counterFlow",
    "answerCode": "val counter by viewModel.counterFlow.collectAsState(initial = 0)\n\nText(\"Counter: $counter\")"
  },
  {
    "id": "28",
    "difficulty": "Medium",
    "question": "🔐 You’re building a login screen. How would you validate the email field in real-time using `StateFlow` in your ViewModel?",
    "questionCode": "// In ViewModel\nval email = MutableStateFlow(\"\")",
    "answerCode": "val isEmailValid = email.map { Patterns.EMAIL_ADDRESS.matcher(it).matches() }\n    .stateIn(viewModelScope, SharingStarted.WhileSubscribed(), false)"
  },
  {
    "id": "29",
    "difficulty": "Medium",
    "question": "📶 How would you detect if the user’s device has no internet connection and show a snackbar in Compose?",
    "questionCode": "// Use ConnectivityManager from Android",
    "answerCode": "val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n\nval isConnected = connectivityManager.activeNetworkInfo?.isConnected == true\n\nLaunchedEffect(isConnected) {\n    if (!isConnected) snackbarHostState.showSnackbar(\"No Internet Connection\")\n}"
  },
  {
    "id": "30",
    "difficulty": "Hard",
    "question": "📁 You need to securely store a user token locally in an Android app. What is the best approach using Jetpack libraries?",
    "questionCode": "// Assume you have a token from login API",
    "answerCode": "val encryptedPrefs = EncryptedSharedPreferences.create(\n    \"secure_prefs\",\n    MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC),\n    context,\n    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\n    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\n)\n\nencryptedPrefs.edit().putString(\"token\", token).apply()"
  },
  {
    "id": "31",
    "difficulty": "Easy",
    "question": "🖼️ You want to load an image from a URL into your Jetpack Compose UI. What is the best approach?",
    "questionCode": "// Show a remote image",
    "answerCode": "AsyncImage(\n    model = \"https://example.com/image.png\",\n    contentDescription = null,\n    modifier = Modifier.size(128.dp),\n    contentScale = ContentScale.Crop\n)"
  },
  {
    "id": "32",
    "difficulty": "Medium",
    "question": "🧪 You want to test your ViewModel logic without relying on Android dependencies. How would you structure your test?",
    "questionCode": "// ViewModel has a MutableStateFlow for counter",
    "answerCode": "@Test\nfun testCounterIncrement() = runTest {\n    val viewModel = MyViewModel()\n    viewModel.increment()\n    assertEquals(1, viewModel.counter.value)\n}"
  },
  {
    "id": "33",
    "difficulty": "Hard",
    "question": "⚙️ You want to split a large Compose screen into multiple recomposable functions without losing state or performance. What pattern would you follow?",
    "questionCode": "// One giant composable with many inputs",
    "answerCode": "// Break into smaller composables and hoist state\n@Composable\nfun ProfileScreen() {\n    val name = remember { mutableStateOf(\"\") }\n    val age = remember { mutableStateOf(0) }\n    NameInput(name)\n    AgeInput(age)\n}\n\n@Composable\nfun NameInput(name: MutableState<String>) {\n    TextField(value = name.value, onValueChange = { name.value = it })\n}"
  },
  {
    "id": "34",
    "difficulty": "Medium",
    "question": "🔃 You want to retry a failed API call every 5 seconds until it succeeds using Kotlin Flow. What operator can help you?",
    "questionCode": "// Wrap your network call",
    "answerCode": "flow {\n    emit(api.fetchData())\n}.retryWhen { cause, attempt ->\n    delay(5000)\n    true // retry forever\n}"
  }
]